#+BEGIN_SRC scheme

#lang racket

(require rackunit racket/trace)

(define lista (list 'beef 'chicken 'pork))

(struct student (name id# dorm) #:transparent)

(define calouro1 (student 'pedro 132300906 '1201))

(define mimi (student 'Mimi 1234 'NewHall))

(define nicole (student 'Nicole 5678 'NewHall))

(define rose (student 'Rose 8765 'NewHall))

(define eric (student 'Eric 4321 'NewHall))

(define in-class (list mimi nicole rose eric))

;criando uma nova estrutura "student body", via struct
;detalhe que ela possui uma inst√¢ncia e 4 fields

(struct student-body (freshman sophomores junior seniors))

(define all-students
  (student-body (list calouro1 (student 'Marry 0101 'OldHall))
                (list (student 'Jeff 5678 'OldHall))
                (list (student 'Bob 4231 'Apartment))
                empty))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;; TESTS ;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(check-equal? (string-append "pedro " "delfino") "pedro delfino")

(check-equal? (list) '())

(check-equal? (cons 'chicken '()) '(chicken)) 

(check-equal? lista '(beef chicken pork))

(check-equal? (first lista) 'beef)

(check-equal? (rest lista) '(chicken pork))

(check-equal? (first (rest lista)) (car (rest lista)))

(check-equal? (car (rest (rest lista))) (last lista))

(check-equal? (student-name calouro1) 'pedro)

(check-equal? (student-id# calouro1) 132300906)

(check-equal? (student-dorm calouro1) '1201)

(check-equal? (student-name (third in-class)) 'Rose)

(check-equal? (car (cdr in-class)) (student 'Nicole 5678 'NewHall))

(check-equal? (student-name (second (student-body-freshman all-students)))
              'Marry)

(check-equal? calouro1 (student 'pedro 132300906 1201))

#+END_SRC
