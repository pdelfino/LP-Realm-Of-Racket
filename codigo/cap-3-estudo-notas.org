#+Title: Comentários sobre o capítulo 3

O capítulo 3 apresenta o conceito de estrutura, definido como =struct=. Até então, algo novo para gente. Aqui estão os nossos rascunhos/testes ao longo do livro para entender o capítulo.

Destaque para o uso de =#:transparent=, comando que torna a estrutura transparente, algo importante para o desenvolvimento do cdigo. Por default, as estruturas em Racket são opacas, já que assim espaço é poupado.

#+BEGIN_SRC scheme

#lang racket

(require rackunit racket/trace)

(define lista (list 'beef 'chicken 'pork))

(struct student (name id# dorm) #:transparent)

(define calouro1 (student 'pedro 132300906 '1201))

(define mimi (student 'Mimi 1234 'NewHall))

(define nicole (student 'Nicole 5678 'NewHall))

(define rose (student 'Rose 8765 'NewHall))

(define eric (student 'Eric 4321 'NewHall))

(define in-class (list mimi nicole rose eric))

#+END_SRC

Aqui criamos uma nova estrutura =student body=, via =struct=
Detalhe que ela possui uma instância e 4 =fields=

#+BEGIN_SRC scheme

(struct student-body (freshman sophomores junior seniors))

(define all-students
  (student-body (list calouro1 (student 'Marry 0101 'OldHall))
                (list (student 'Jeff 5678 'OldHall))
                (list (student 'Bob 4231 'Apartment))
                empty))
                
#+END_SRC

Conforme íamos explorando os exemplos do livro, fomos executando alguns comandos.
Apenas para fins de exemplo, aqui estão, no formato de testes, alguns dos comandos que exploramos.

#+BEGIN_SRC scheme
;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;; TESTS ;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(check-equal? (string-append "pedro " "delfino") "pedro delfino")

(check-equal? (list) '())

(check-equal? (cons 'chicken '()) '(chicken)) 

(check-equal? lista '(beef chicken pork))

(check-equal? (first lista) 'beef)

(check-equal? (rest lista) '(chicken pork))

(check-equal? (first (rest lista)) (car (rest lista)))

(check-equal? (car (rest (rest lista))) (last lista))

(check-equal? (student-name calouro1) 'pedro)

(check-equal? (student-id# calouro1) 132300906)

(check-equal? (student-dorm calouro1) '1201)

(check-equal? (student-name (third in-class)) 'Rose)

(check-equal? (car (cdr in-class)) (student 'Nicole 5678 'NewHall))

(check-equal? (student-name (second (student-body-freshman all-students)))
              'Marry)

(check-equal? calouro1 (student 'pedro 132300906 1201))

#+END_SRC
