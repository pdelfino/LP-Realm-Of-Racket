#+Title: Construções built-in de =loops= disponíveis em Racket

O capítulo 9 apresenta diversos loops. No fundo, como a citação de Peter Landin no livro SICP sugere, construções específicas de loops
são apenas açúcares sintáticos, uma vez que qualquer um desses loops pode ser criado a partir de definições recursivas de processos
imperativos ou recursivos.

Contudo, não deixa de ser legal/interessante conhecê-los. Eles podem muitas vezes, contribuir para reduzir o número de linhas em um programa.

O livro apresenta loops como:

- for/list;
- for*;
- for/fold;
- for*/list; entre outros.

Segue, abaixo, alguns exemplos:

#+BEGIN_SRC scheme

#lang racket

(require rackunit racket/trace)

(check-equal?(for/list ((i '(1 2 3 4 5))
                        #:when (odd? i)) i) '(1 3 5))

(check-equal?(for/fold ((sum 0))
                       ((i '(1 2 3 4 5))
                        #:when (even? i)) (+ sum i)) 6)
                        
                        #+END_SRC

Destaque aqui para a construção =#:when= que funciona um pouco como um filtro.

#+BEGIN_SRC scheme

(check-equal? (for/list ([ i '(1 2 3 4 5)]
                         [ j '(1 2 3 4)]
                         [ k '(5 4 3 2 1)])
                (list i j k))
              '((1 1 5) (2 2 4) (3 3 3) (4 4 2)))

(check-equal? (for/list ([i '(1 2 3 4 5)]
                         [s '("a" "b" "c" "d" "e")]
                         #:when (and (even? i) (string=? s "d")))
                i) '(4))

;uso do for*/list
(check-equal? (for*/list ((i '(1 2 3))
                          (j '(4 5 6)))
                (+ i j)) '(5 6 7 6 7 8 7 8 9))

;nested loop
(for (( i '(1 2 3)))
      (for ((j '(1 2 3)))
        (for ((k '(1 2 3)))
          (displayln (list i j k)))))

;construção específica para nested loop, faz o mesmo que o loop acima
;mas sem repetir o for
(for* ((i '(1 2 3))
       (j '(1 2 3))
       (k '(1 2 3)))
       (displayln (list i j k)))

#+END_SRC
