* Implementando uma versão funcional para o jogo "Guess My Number"

    No capítulo 2, o livro nos ensina a construir uma versão imperativa para o famoso jogo "Guess My Number". Como o nosso curso foi conduzido com base no SICP, que explora o paradigma funcional, decidimos criar uma implementação do jogo que fosse funcional. Como é possível observar, nossa implementação trabalha com valores que são alterados nos parâmetros. Cabe ainda dizer que ela recebe o número escolhido para ser advinhado e retorna dois valores, (i) o valor que foi advinhado e (ii) o número de "tentativas" do algoritmo para achar o valor a ser advinhado.    
    
    O comando trace está precedido de um ";", tornando o um comentário. Sugerimos, para fins de exploração da função, que o comentário seja retirado. Assim, será possível ver o comportamento dos parâmetros, em especial, a mudança dos intervalos e o número de tentativas. Essa implementação usa uma abordagem de "binary search", reduzindo o intervalo de busca a cada tentativa.
    
#+BEGIN_SRC scheme

#lang racket

(require racket/trace rackunit)

(define (guess lower-boundary upper-boundary)
  (round (/ (+ lower-boundary upper-boundary) 2)))

(define (game-iter number)
  (define (iter number count lower-boundary  upper-boundary accu)
    (cond ((= (guess lower-boundary upper-boundary) number)
           (values count (guess lower-boundary upper-boundary)))
          ((> (guess lower-boundary upper-boundary) number)
           (iter  number
                  (add1 count)
                  lower-boundary
                  (sub1 (guess lower-boundary upper-boundary))
                  (guess lower-boundary upper-boundary)))
          (else (iter number
                      (add1 count)
                      (add1 (guess lower-boundary upper-boundary))
                      upper-boundary
                      (guess lower-boundary upper-boundary)))))
  ;(trace iter)
  (iter number 0 1 100 (guess 1 100)))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;; TESTS ;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(define-values (par1 par2) (game-iter 10))

(check-equal? par1 5)

(check-equal? par2 10)

#+END_SRC
