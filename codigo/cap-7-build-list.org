#+Title: Implementando a função built-in =build-list=

Implementamos a função =build-list= para ganhar maior fluência na linguagem.

Um primeiro ponto a ser destacado é que a =build-list=, quando acompanhada de =values=, produz o mesmo output da função =range=.

#+BEGIN_SRC scheme

#lang racket

(require rackunit)

(check-equal? (build-list 10 values) (range 0 10) '(0 1 2 3 4 5 6 7 8 9))

#+END_SRC

É possível sofisticar =built-list= e usar um procedure como argumento. É, inclusive, possível usar procedimentos anônimos,
isto é, expressões =lambda= dentro de =build-list=.

#+BEGIN_SRC scheme

#lang racket

(require rackunit)

(check-equal? (build-list 10 sub1) '(-1 0 1 2 3 4 5 6 7 8))

(check-equal? (build-list 10 (lambda (x) (* 5 x))) '(0 5 10 15 20 25 30 35 40 45))

#+END_SRC

Com fins educativos, decidimos implementar uma verão nossa para =build-list= . O próprio livro, no capítulo 7, também aprensenta uma construção de =build-list=. O tempo todos somos incentivados a construir essas funçes built-in em Racket. Abaixo serão aprensentadas três funções, uma implementação nossa recursiva, uma implementação nossa iterativa e a implementação do livro. Além disso, apresentamos testes envolvendo as três funções e tendo como parâmetro a função =build-list= da linguagem, de modo a garantir que o output está correto. 

#+BEGIN_SRC scheme

#lang racket

(require rackunit racket/trace)

(define (my-build-list-iter list-len proc)
  (define (iter list-len accu n)
    (if (= (length accu) list-len)
        (reverse accu)
        (iter list-len (cons (proc n) accu) (add1 n))))
  ;(trace iter)
  (iter list-len '() 0))

(define (my-build-list-recur list-len proc)
  (if (= list-len 0)
      '()
      (cons
       (proc (sub1 list-len)) (my-build-list-recur (sub1 list-len) proc))))

(define (my-build-list-book n f)
  (define (builder k)
    (cond ((= n k) empty)
          (else (cons (f k) (builder (add1 k))))))
  (builder 0))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;; TESTS ;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(check-equal? (build-list 10 values)
               (my-build-list-iter 10 values))

(check-equal? (build-list 10 values)
               (reverse (my-build-list-recur 10 values)))

(check-equal? (build-list 10 values)
               (my-build-list-book 10 values))
      
      #+END_SRC
