#+Title: Implementando a função built-in =build-list=

Implementamos a função =build-list= para ganhar maior fluência na linguagem.

Um primeiro ponto a ser destacado é que a =build-list=, quando acompanhada de =values=, produz o mesmo output da função =range=.

#+BEGIN_SRC scheme

#lang racket

(require rackunit)

(check-equal? (build-list 10 values) (range 0 10) '(0 1 2 3 4 5 6 7 8 9))

#+END_SRC

É possível sofisticar =built-list= e usar um procedure como argumento. É, inclusive, possível usar procedimentos anônimos,
isto é, expressões =lambda= dentro de =build-list=.

#+BEGIN_SRC scheme

#lang racket

(require rackunit)

(check-equal? (build-list 10 sub1) '(-1 0 1 2 3 4 5 6 7 8))

(check-equal? (build-list 10 (lambda (x) (* 5 x))) '(0 5 10 15 20 25 30 35 40 45))

#+END_SRC

Com fins educativos, decidimos implementar uma verão nossa para =build-list=. O próprio livro, no capítulo 7, também aprensenta uma construção de build-list. Abaixo serão aprensentadas três funções, uma implementação nossa recursiva, uma implementação nossa iterativa e a implementação sugerido pelo livro - além disso, testes envolvendo as três funções com exemplos da documentação.
