#+Title: Implementando "challenge two" do Cap 6

* Challenge easy - Alter the game so that it has a randomly varying number of goos.

Segue a implementação:

#+BEGIN_SRC scheme

#lang racket

(struct pit (snake goos) #:transparent)

(struct snake (dir segs) #:transparent)

(struct posn (x y) #:transparent)

(struct goo (loc expire) #:transparent)

(define snake-example
  (snake "up" (list (posn 1 1) (posn 1 2) (posn 1 3))))

(define goo-example
  (list (goo (posn 1 1) 3) (goo (posn 5 8) 15)))

(define goo-example-two
  (list (goo (posn 9 9) 3) (goo (posn 5 8) 15)))

(define goo-example-three
  (list (goo (posn 5 8) 3) (goo (posn 1 1) 15)))

(define pit-example
  (pit snake-example goo-example))

(require 2htdp/universe 2htdp/image)

(define (start-snake)
  (big-bang (pit (snake "right" (list (posn 1 1))) ;snake começa na direção da direita, na posição (1,1) e com uma unidade de cumprimento, a cabeça
                 (list (fresh-goo) ;lembra que o pit é composto de duas paradas a SNAKE e a GOOS na sua estrutura, sendo GOO uma LISTA de N elementos
                       (fresh-goo)
                       (fresh-goo);número de GOOS, coloquei GOO para caralho
                       (fresh-goo)
                       (fresh-goo)
                       (fresh-goo)
                       (fresh-goo)))
            (on-tick next-pit TICK-RATE) ;aqui tem uma criação temporal, faz a cobra CRESCER e se MOVER. Além de fazer desaparecer GOO
            (on-key direct-snake) ;on-key do big bang chama o direct snake
            (to-draw render-pit) ;to-draw chama o RENDER-pit
            (stop-when dead? render-end))) ; o stop-when dead? chama o render-end

(define (next-pit w) ; essa função controla o tempo, faz o GOO envelhecer, e a cobra ENGORDAR se ela come
  (define snake (pit-snake w))
  (define goos (pit-goos w))
  (define goo-to-eat (can-eat snake goos)) ;veja que goo to eat é definido INTERNAMENTE
  (if goo-to-eat
      (pit (grow snake) (age-goo (eat goos goo-to-eat))); se GOO to eat for verdadeiro, chama pit (grow snake)
      (pit (slither snake) (age-goo goos)))); se não for verdadeiro, chama o pit com (slither snake)

(define (can-eat snake goos)
  (cond [(empty? goos) #f] ;se a lista de goos for vazia, a cobra não consegue comer
        [else (if (close? (snake-head snake) (first goos)) ;close checa se a cabeça da cobra está perto de um GOO
                  (first goos)
                  (can-eat snake (rest goos)))]))

(define (close? s g)
  (posn=? s (goo-loc g)))

(define (eat goos goo-to-eat)
  (cons (fresh-goo) (remove goo-to-eat goos)))

(define (grow sn)
  (snake (snake-dir sn)
         (cons (next-head sn) (snake-segs sn))))

(define (slither sn)
  (snake (snake-dir sn)
         (cons (next-head sn) (all-but-last (snake-segs sn)))))

(define (all-but-last segs)
  (cond [(empty? (rest segs)) empty]
        [else (cons (first segs) (all-but-last (rest segs)))]))

(define (next-head sn)
  (define head (snake-head sn))
  (define dir (snake-dir sn))
  (cond [(string=? dir "up") (posn-move head 0 -1)]
        [(string=? dir "down") (posn-move head 0 1)]
        [(string=? dir "left") (posn-move head -1 0)]
        [(string=? dir "right") (posn-move head 1 0)]))

(define (posn-move p dx dy)
  (posn (+ (posn-x p) dx)
        (+ (posn-y p) dy)))

(define (age-goo goos)
  (rot (renew goos)))

(define (rot goos)
  (cond [(empty? goos) empty]
        [else (cons (decay (first goos)) (rot (rest goos)))]))

(define (renew goos)
  (cond [(empty? goos) empty]
        [(rotten? (first goos))
         (cons (fresh-goo) (renew (rest goos)))]
        [else
         (cons (first goos) (renew (rest goos)))]))

(define (rotten? g)
  (zero? (goo-expire g)))

(define (fresh-goo)
  (goo (posn (add1 (random (sub1 SIZE)))
             (add1 (random (sub1 SIZE))))
       EXPIRATION-TIME))

(define (direct-snake w ke)
  (cond [(dir? ke) (world-change-dir w ke)]
        [else w]))

(define (dir? x)
  (or (key=? x "up")
      (key=? x "down")
      (key=? x "left")
      (key=? x "right")))

(define (world-change-dir w d)
  (define the-snake (pit-snake w))
  (cond [(and (opposite-dir? (snake-dir the-snake) d)
              ;; consists of the head and at least one segment
              (cons? (rest (snake-segs the-snake))))
         (stop-with w)]
        [else
         (pit (snake-change-dir the-snake d) (pit-goos w))]))

(define (opposite-dir? d1 d2)
  (cond [(string=? d1 "up") (string=? d2 "down")]
        [(string=? d1 "down") (string=? d2 "up")]
        [(string=? d1 "left") (string=? d2 "right")]
        [(string=? d1 "right") (string=? d2 "left")]))

;relacionada ao to-draw do BIG BANG
(define (render-pit w)
  (snake+scene (pit-snake w)
               (goo-list+scene (pit-goos w) MT-SCENE)))

(define (snake+scene snake scene)
  (define snake-body-scene
    (img-list+scene (snake-body snake) SEG-IMG scene))
  (define dir (snake-dir snake))
  (img+scene (snake-head snake)
             (cond [(string=? "up" dir) HEAD-UP-IMG]
                   [(string=? "down" dir) HEAD-DOWN-IMG]
                   [(string=? "left" dir) HEAD-LEFT-IMG]
                   [(string=? "right" dir) HEAD-RIGHT-IMG])
             snake-body-scene))

(define (img-list+scene posns img scene)
  (cond [(empty? posns) scene]
        [else (img+scene
               (first posns)
               img
               (img-list+scene (rest posns) img scene))]))

(define (img+scene posn img scene)
  (place-image img
               (* (posn-x posn) SEG-SIZE)
               (* (posn-y posn) SEG-SIZE)
               scene))

(define (goo-list+scene goos scene)
  (define (get-posns-from-goo goos)
    (cond [(empty? goos) empty]
          [else (cons (goo-loc (first goos))
                      (get-posns-from-goo (rest goos)))]))
  (img-list+scene (get-posns-from-goo goos) GOO-IMG scene))

(define (dead? w)
  (define snake (pit-snake w))
  (or (self-colliding? snake) (wall-colliding? snake)))

(define (render-end w)
  (overlay (text (string-append "GAME OVER! You have eaten "
                                (number->string (num-goo-eaten w)) " GOOS")
                 ENDGAME-TEXT-SIZE "black")
           (render-pit w)))

(define (self-colliding? snake)
  (cons? (member (snake-head snake) (snake-body snake))))

(define (wall-colliding? snake)
  (define x (posn-x (snake-head snake)))
  (define y (posn-y (snake-head snake)))
  (or (= 0 x) (= x SIZE)
      (= 0 y) (= y SIZE)))

(define (posn=? p1 p2)
  (and (= (posn-x p1) (posn-x p2))
       (= (posn-y p1) (posn-y p2))))

(define (snake-head sn)
  (first (snake-segs sn)))

(define (snake-body sn)
  (rest (snake-segs sn)))

(define (snake-tail sn)
  (last (snake-segs sn)))

(define (snake-change-dir sn d)
  (snake d (snake-segs sn)))

(define (decay g)
  (goo (goo-loc g) (sub1 (goo-expire g))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; CONSTANTES ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define TICK-RATE 1/10)

(define SIZE 30)

(define SEG-SIZE 15)

(define MAX-GOO 5)

(define EXPIRATION-TIME 150)

(define WIDTH-PX  (* SEG-SIZE 30))
(define HEIGHT-PX (* SEG-SIZE 30))

(define MT-SCENE (empty-scene WIDTH-PX HEIGHT-PX))
(define GOO-IMG (bitmap "goo.gif"))
(define SEG-IMG  (bitmap "body.gif"))
(define HEAD-IMG (bitmap "head.gif"))

(define HEAD-LEFT-IMG HEAD-IMG)
(define HEAD-DOWN-IMG (rotate 90 HEAD-LEFT-IMG))
(define HEAD-RIGHT-IMG (flip-horizontal HEAD-LEFT-IMG))
(define HEAD-UP-IMG (flip-vertical HEAD-DOWN-IMG))

(define ENDGAME-TEXT-SIZE 20)

;(require racket/trace)
;(trace can-eat)

(define (num-goo-eaten w)
  (sub1 (length (snake-segs (pit-snake w)))))

(start-snake)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;TESTES PARA CHECAR COMPREENSÃO DO CÓDIGO;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require rackunit)

(check-equal? (snake-segs snake-example) (list (posn 1 1) (posn 1 2) (posn 1 3)))
(check-equal? (snake-dir snake-example) "up")
(check-equal? (goo-expire (first goo-example)) 3)
(check-equal? (pit-snake pit-example) snake-example)
(check-equal? (pit-goos pit-example) goo-example)
(check-equal? (posn-x (posn 1 2)) 1)
(check-equal? (posn-y (posn 1 2)) 2)
(check-equal? (can-eat snake-example '()) #f)
(check-equal? (can-eat snake-example goo-example) (first goo-example))
(check-equal? (can-eat snake-example goo-example-two) #f)
(check-equal? (can-eat snake-example goo-example-three) (second goo-example-three))
(check-equal? (string-append "12" "aha" "aha" ) "12ahaaha")
(check-equal? (number->string 12)"12")
(check-equal? (length
               (snake-segs
                (pit-snake
                 (pit
                  (snake "left" (list (posn 0 2)))
                  (list
                   (goo (posn 27 21) 108)
                   (goo (posn 11 6) 108)
                   (goo (posn 20 1) 108)
                   (goo (posn 3 29) 108)
                   (goo (posn 19 5) 108)
                   (goo (posn 1 17) 108)
                   (goo (posn 28 2) 108)))))) 1)
              
